name: CI/CD Pipeline

on:
  push:
    branches:
      - develop/#2
  pull_request:
    branches:
      - develop/#2

jobs:
  deploy:
    name: Build Docker image and deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Build with Gradle (without tests)
        run: ./gradlew build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: docker build -t deepdot .

      - name: Tag Docker image for ECR
        run: docker tag deepdot:latest ${{ secrets.AWS_ECR_REGISTRY }}/deepdot:latest

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.AWS_ECR_REGISTRY }}/deepdot:latest

      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            set -e
            
            echo "[1] 8080 포트 점유 프로세스 종료(있으면)"
            PID=$(sudo lsof -t -i:8080 || true)
            if [ -n "$PID" ]; then sudo kill -9 $PID || true; fi
            
            echo "[2] ECR 로그인"
            aws ecr get-login-password --region ap-northeast-2 \
              | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}
            
            echo "[3] 기존 컨테이너 정리 (redis 제외, 정지/실행 모두)"
            # by name
            sudo docker rm -f hdev_server 2>/dev/null || true
            # by image ancestor (deepdot) — 실행/정지 모두
            ids=$(sudo docker ps -aq --filter "ancestor=${{ secrets.AWS_ECR_REGISTRY }}/deepdot:latest")
            if [ -n "$ids" ]; then sudo docker rm -f $ids || true; fi
            # redis는 유지
            # 혹시 redis 외 전부 지우고 싶으면: sudo docker ps -aq | grep -v "$(sudo docker ps -aq -f name=redis)" | xargs -r sudo docker rm -f
            
            echo "[4] deepdot 이미지 정리 (실패 무시)"
            imgs=$(sudo docker images --format '{{.Repository}}:{{.Tag}} {{.ID}}' | awk '/deepdot/ {print $2}')
            if [ -n "$imgs" ]; then sudo docker image rm -f $imgs || true; fi
            
            echo "[5] 최신 이미지 Pull"
            sudo docker pull ${{ secrets.AWS_ECR_REGISTRY }}/deepdot:latest
            
            echo "[6] 새 컨테이너 실행"
            # ~/app.env 파일이 실제로 있어야 함
            test -f ~/app.env || (echo "app.env 없음"; exit 1)
            
            sudo docker run -d \
              --env-file ~/app.env \
              -p 8080:8080 \
              --name hdev_server \
              ${{ secrets.AWS_ECR_REGISTRY }}/deepdot:latest
            
            echo "배포 완료"